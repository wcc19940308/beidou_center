package com.ctbt.beidou.base.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Service;

import com.ctbt.beidou.base.bo.KeyValue;
import com.ctbt.beidou.base.dao.SysDicMapper;
import com.ctbt.beidou.base.dao.SysRegionMapper;
import com.ctbt.beidou.base.model.SysDic;
import com.ctbt.beidou.base.model.SysRegion;

@Service("dicService")
public class DicServiceImpl implements IDicService{

	private Logger logger = LogManager.getLogger(getClass());

	@Resource
	private SysDicMapper sysDicMapper;

	@Resource
	private SysRegionMapper sysRegionMapper;
	
	/**
     * 获得所有的字典，map<dicId,map<key,value>>
     * 
     * @return
     */
	public Map<String, List<KeyValue>> getAllDic() {
		Map<String, List<KeyValue>> allDicMap = new HashMap<String, List<KeyValue>>();
		List<SysDic> list = sysDicMapper.findAllValidity();
		if(list != null && list.size() > 0){
			SysDic sysDic;
			List<KeyValue> dicList;
			for(int k = 0; k < list.size(); k++){
				sysDic = (SysDic) list.get(k);
				dicList = this.loadDic(sysDic);
				if(dicList != null){
					allDicMap.put(sysDic.getDicId().toString(), dicList);
				}
			}
		}

		return allDicMap;
	}

	public List<KeyValue> loadDic(SysDic sysDic) {
		String dicSql = sysDic.getDicSql();
		String sql = "Select "+ sysDic.getKeyColumn() + " item_key, "+sysDic.getValueColumn()+" item_value from "+sysDic.getTableName();
		if(dicSql.startsWith("ORDER") || dicSql.startsWith("GROUP")) {
			sql += " "+sysDic.getDicSql();
		}else {
			sql += " where "+sysDic.getDicSql();
		}
		
		return sysDicMapper.queryDicKeyValueListBySql(sql);
	}
	

	/**
     * 根据字典号，返回一个字典，用于重新加载某一个 字典
     * 
     * @param dicId
     * @return
     */
	public List<KeyValue> loadDic(Integer dicId) {
		return sysDicMapper.queryDicKeyValueListById(dicId);
	}

	@Override
	public List<KeyValue> queryCountryList() {
		return sysRegionMapper.queryCountryList();
	}
	
	@Override
	public List<KeyValue> queryProvinceList(Integer countryId) {
		return sysRegionMapper.queryProvinceList(countryId);
	}

	@Override
	public List<KeyValue> queryCityList(Integer regId) {
		return sysRegionMapper.queryCityList(regId);
	}

	@Override
	public List<KeyValue> queryCityAreaList(Integer regId) {
		return sysRegionMapper.queryCityAreaList(regId);
	}

	@Override
	public List<KeyValue> queryTownList(Integer regId) {
		return sysRegionMapper.queryTownList(regId);
	}

	@Override
	public List<KeyValue> queryVillageList(Integer regId) {
		return sysRegionMapper.queryVillageList(regId);
	}


	
	@Override
	public int insert(SysRegion record) {
		// TODO Auto-generated method stub
		return sysRegionMapper.insert(record);
	}

	@Override
	public Integer queryMax() {
		// TODO Auto-generated method stub
		return sysRegionMapper.queryMax();
	}


	@Override
	public List<SysRegion> querySysRegionTree() {
		return sysRegionMapper.querySysRegionTree();
	}

	@Override
	public List<SysRegion> querySysRegionTreeByParentId() {
		return sysRegionMapper.querySysRegionTree();
	}

	@Override
	public SysRegion queryV(SysRegion record) {
		// TODO Auto-generated method stub
		return sysRegionMapper.queryV(record);
	}

	@Override
	public SysRegion queryT(SysRegion record) {
		// TODO Auto-generated method stub
		return sysRegionMapper.queryT(record);
	}

	@Override
	public List<SysRegion> querySysRegionShipTree(Map<String, Object> record) {
		
		return sysRegionMapper.querySysRegionShipTree(record);
	}



}
