<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">
        
	<context:component-scan base-package="com.ctbt.beidou.*">
    	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
	</context:component-scan>

    <!--加载数据库配置文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--创建数据源，多例模式-->
    <!-- bean class="org.springframework.jdbc.datasource.DriverManagerDataSource" id="dataSource">
        <property name="driverClassName" value="${driver}"/>
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </bean -->
    
	<!-- 第一步：配置数据源 -->
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">  
        <property name="jndiName">
            <value>${jndi.data_source}</value>
        </property>
    </bean>

    <!--第二步：创建sqlSessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--传入数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定MyBatis的核心配置文件的位置-->
        <property name="configLocation" value="classpath:springMybatis.xml"/>
        <!--其他MyBatis的配置都可以在此进行配置--> 
     
    </bean>
    
    <!--扫描Mapper，生成dao的代理对象-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ctbt.beidou.base.dao"/>
   		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    
    <!--事务注解驱动-->
    <tx:annotation-driven/>

    <!--事务管理器，将数据源注入-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
  
    <!--事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--事务传播，默认REQUIRED，这是一个具有事务的方法，没有则创建事务-->
            <!--事务隔离，默认DEFAULT，此设置是为了解决并发事务中，脏读、不可重复读外、幻读，性能会下降-->
            <tx:method name="add*" isolation="SERIALIZABLE" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" isolation="SERIALIZABLE" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" isolation="SERIALIZABLE" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" isolation="SERIALIZABLE" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" isolation="SERIALIZABLE" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <!--只读事务，只做查询，不修改数据的事务。JDBC驱动会进行优化-->
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

	<!-- 配置拦截service -->
	<aop:config>
		<!-- aop:advisor advice-ref="txAdvice" pointcut="execution(* com.ctbt.beidou.*.service.*.*(..))"/ -->
		<aop:pointcut id="testService" expression="execution(* com.ctbt.beidou.*.service.*.*(..))"/>  
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="testService"/>
	</aop:config>
</beans>